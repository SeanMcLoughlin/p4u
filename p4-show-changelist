#!/usr/bin/env bash
#
# Description: prints p4 information of a specific changelist
# Author: Arnon Zilca
#

set -e

# get script dir path
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

source "${SCRIPT_PATH}/p4-help-functions"

usage() {
    echo "usage: $(basename $0) [options] changelist" >&2
    echo "   -b     brief printing of change" >&3
}

while getopts "h?b" opt; do
    case "${opt}" in
        h)
            usage
            exit 0
            ;;
        b)
            BRIEF_PRINT=1
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done
shift $(( OPTIND - 1 ))

if [[ "$#" -lt 1 ]]; then
    changelist=$(p4-pick-changelist "show" 0 -b) # sourced in p4-help-functions
else
    changelist="$1"
fi

AFFECTED_TEXT="Affected files"
SHELVED_TEXT="Shelved files"
REVIEW_TEXT="ReviewBoard"
BUG_TEXT="Jobs fixed"

if [[ -n "${BRIEF_PRINT}" ]]; then
    MAX_FILES="-m1"
fi

pending=$(p4 describe -s ${MAX_FILES} ${changelist} | sed '/^[\t]*$/d')
is_pending=$(echo -e "${PURPLE}${pending}${NO_COLOR}" | head -n 1 | grep "\*pending\*" || true)
if [[ -n "${is_pending}" ]]; then
    # has shelved files only on pending changes
    shelved=$(p4 describe -Ss ${MAX_FILES} ${changelist} 2> /dev/null | sed '/^[\t]*$/d')
fi

review_line=$(echo "${pending}" | grep -n "${REVIEW_TEXT}" | cut -f1 -d:)
bug_line=$(echo "${pending}" | grep -n "${BUG_TEXT}" | cut -f1 -d:)
affected_line=$(echo "${pending}" | grep -n "${AFFECTED_TEXT}" | cut -f1 -d:)


description_lines=$(echo -e "${review_line}\n${bug_line}\n${affected_line}" | sed '/^[\t]*$/d' | sort -g | head -n 1)
description_lines=$(( description_lines - 1 ))
echo -e "${PURPLE}${pending}${NO_COLOR}" | head -n "${description_lines}"

review=$(echo "${pending}" | grep "${REVIEW_TEXT}" || true)
if [[ -n "${review}" ]]; then
    echo -e "${YELLOW}${review}${NO_COLOR}"
fi

bugs=$(echo "${pending}" | grep -n "${BUG_TEXT}" || true)
if [[ -n "${bugs}" ]]; then
    bugs_start_line=$(echo "${bugs}" | cut -f1 -d:)
    bugs_start_line=$(( bugs_start_line + 1 ))
    bugs_end_line="$(echo "${pending}" | grep -n "${AFFECTED_TEXT}" | cut -f1 -d:)"
    bugs_end_line=$(( bugs_end_line - 1 ))
    bugs_text=$(echo "${pending}" | sed -n "${bugs_start_line},${bugs_end_line}p" )
    echo -en "${GREEN}        Bugs Fixed: "

    while read -r line1 && read -r line2; do
        echo -n "${bugs_print_spaces}${line1}"  # print bug#, user & state
        echo " - ${line2}"                      # print bug's description
        bugs_print_spaces="                    "
    done <<< "${bugs_text}"

    echo -en "${NO_COLOR}"
fi

if echo "${pending}" | grep "${AFFECTED_TEXT}" > /dev/null; then
    pending_lines="$(echo "${pending}" | grep -n "${AFFECTED_TEXT}" | cut -f1 -d:)"
    pending_lines=$(( pending_lines + 1 ))
    pending="$(echo "${pending}" | tail -n+${pending_lines})"

    if [[ -n "${pending}" ]]; then
        if [[ -n "${is_pending}" || -z "${BRIEF_PRINT}" ]]; then
            echo -e "${BLUE}    Pending Files${NO_COLOR}"
        fi
        if [[ -z "${BRIEF_PRINT}" ]]; then
            echo "${pending}"
        fi
    fi
fi
if echo "${shelved}" | grep "${SHELVED_TEXT}" > /dev/null; then
    shelved_lines="$(echo "${shelved}" | grep -n "${SHELVED_TEXT}" | cut -f1 -d:)"
    shelved_lines=$(( shelved_lines + 1 ))
    shelved="$(echo "${shelved}" | tail -n+${shelved_lines})"

    if [[ -n "${shelved}" ]]; then
        if [[ -n "${is_pending}" || -z "${BRIEF_PRINT}" ]]; then
            echo -e "${RED}    Shelved Files${NO_COLOR}"
        fi
        if [[ -z "${BRIEF_PRINT}" ]]; then
            echo "${shelved}"
        fi
    fi
fi
echo -e ${NO_COLOR}
