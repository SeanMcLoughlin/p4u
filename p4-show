#!/usr/bin/env bash
#
# Description: prints p4 changelists information (formatted and colored)
# Author: Arnon Zilca
#

set -e

# get script dir path
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

source "${SCRIPT_PATH}/p4-help-functions"

clear_line() {
    echo -en "\r                                                                                           \r${NO_COLOR}" >&2
}

usage() {
    clear_line
    echo '           /$$   /$$                   /$$' >&2
    echo '  /$$$$$$ | $$  | $$                  | $$' >&2
    echo ' /$$__  $$| $$  | $$          /$$$$$$$| $$$$$$$   /$$$$$$  /$$  /$$  /$$' >&2
    echo '| $$  \ $$| $$$$$$$$ /$$$$$$ /$$_____/| $$__  $$ /$$__  $$| $$ | $$ | $$' >&2
    echo '| $$  | $$|_____  $$|______/|  $$$$$$ | $$  \ $$| $$  \ $$| $$ | $$ | $$' >&2
    echo '| $$$$$$$/      | $$         \____  $$| $$  | $$| $$  | $$| $$ | $$ | $$' >&2
    echo '| $$____/       | $$         /$$$$$$$/| $$  | $$|  $$$$$$/|  $$$$$/$$$$/' >&2
    echo '| $$            |__/        |_______/ |__/  |__/ \______/  \_____/\___/' >&2
    echo '| $$' >&2
    echo '|__/' >&2
    echo >&2
    echo >&2
    echo -en "${NO_COLOR}" >&2
    echo    "$(basename $0) -- prints p4 changelists information" >&2
    echo    "usage: $(basename $0) [options]" >&2
    echo    "  -h           shows this help" >&2
    echo    "  -v           force verbose printing - including pending & shelved filenames" >&2
    echo    "  -b           force brief printing - no filenames (inferior to -v)" >&2
    echo    "  -n           no colors" >&2
    echo    "  -o           force colors (when piping)" >&2
    echo    "  -p           show pending only (no shelved chagelists)" >&2
    echo    "  -s           show shelved only (no pending chagelists)" >&2
    echo    "  -a           show all changelists (not just current pending & shelved)" >&2
    echo    "  -d           show only the default changelist" >&2
    echo    "  -l           skip changelists limit check (${NUMBER_OF_CHANGELISTS_LIMIT})" >&2
    echo    "  -m max       show the 'max' most recent changelists (default changelist won't be shown)" >&2
    echo    "  -c client    filter by client" >&2
    echo    "  -u user      filter by user (the default in your case is $(p4-resolve-username))" >&2
}

show-default-changelist() {
    p4 opened -u $1 -C $2 2> /dev/null | grep "${P4_DEFAULT_CHANGE}" || true #P4_DEFAULT_CHANGE from p4-help-functions
}

STEPS=9
CURRENT_STEP=0
print_progress() {
    if [[ -n "$1" ]]; then
        CURRENT_STEP=$((CURRENT_STEP+3))
    fi
    printf "\r${CYAN}p4 progress [" >&2
    printf %${CURRENT_STEP}s | tr " " "=" >&2
    printf %$((STEPS-CURRENT_STEP))s >&2
    printf "] (%d%%)${NO_COLOR}" $((100 * CURRENT_STEP / STEPS)) >&2
}

cleanup() {
    exit_code=$?
    tput cnorm
    clear_line
    exit ${exit_code}
}

trap cleanup SIGINT SIGTERM ERR EXIT

tput civis

#setting up default flags
PRINT_DEFAULT_CHANGELIST=1
VERBOSE_PRINT_SOFT_LIMIT=4
NUMBER_OF_CHANGELISTS_LIMIT=50
CHANGELISTS_SHOWN_FLAG="-s pending"
LIMIT_CHECK=1

echo -en "${RED}" >&2

while getopts "h?vbnopsadlm:c:u:" opt; do
    case "${opt}" in
        h)
            usage
            exit 0
            ;;
        v)
            FORCE_VERBOSE=1
            ;;
        b)
            FORCE_BRIEF="-b"
            ;;
        n)
            uncolor     # sourced in p4-help-functions
            ;;
        o)
            force_color # sourced in p4-help-functions
            ;;
        p)
            NO_SHELVED=1
            ;;
        s)
            CHANGELISTS_SHOWN_FLAG="-s shelved"
            PRINT_DEFAULT_CHANGELIST=
            ;;
        a)
            CHANGELISTS_SHOWN_FLAG=
            ;;
        d)
            ONLY_DEFAULT_CHANGELIST=1
            ;;
        l)
            LIMIT_CHECK=
            ;;
        m)
            RECENT_FLAG="-m ${OPTARG}"
            PRINT_DEFAULT_CHANGELIST=
            LIMIT_CHECK=
            ;;
        c)
            CLIENT_NAME="${OPTARG}"
            ;;
        u)
            USER_OVERRIDE="${OPTARG}"
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done
shift $(( OPTIND - 1 ))

echo -en "${NO_COLOR}" >&2
print_progress

if [[ -z "${CLIENT_NAME}" ]]; then
    CLIENT_NAME=$(p4-client-name)   # sourced in p4-help-functions
    if [[ "${CLIENT_NAME}" == "${HOSTNAME}" ]]; then
        # perforce returns the hostname when not in a p4 client dir
        clear_line
        echo -e "\r${RED}Not inside a p4 client directory - can't determine default client." >&2
        echo -e "Move to a p4 client directory, or use the -c option.${NO_COLOR}" >&2
        usage
        exit 2
    fi
    if [[ -n "${USER_OVERRIDE}" ]]; then
        clear_line
        tput cnorm
        CLIENT_NAME=$(p4-pick-client ${USER_OVERRIDE})  # sourced in p4-help-functions
        tput civis
    fi
fi
print_progress +

if [[ -z "${USER_OVERRIDE}" ]]; then
    USER_OVERRIDE=$(p4-resolve-username)
fi

if [[ -n ${FORCE_VERBOSE} ]]; then  # verbose takes precendence over brief
    FORCE_BRIEF=
fi

if [[ -n ${FORCE_BRIEF} ]]; then
    BRIEF_PRINT="-b"
fi

if [[ -n "${PRINT_DEFAULT_CHANGELIST}" ]]; then
    default_changelist=$(show-default-changelist ${USER_OVERRIDE} ${CLIENT_NAME})
fi
print_progress +

if [[ -z "${ONLY_DEFAULT_CHANGELIST}" ]]; then
    changelists=$(p4 changes ${CHANGELISTS_SHOWN_FLAG} -u "${USER_OVERRIDE}" -c "${CLIENT_NAME}" ${RECENT_FLAG})
    changelists=$(echo "${changelists}" | awk '{print $2}') # split inorder to catch a login error.
    if [[ -n "${NO_SHELVED}" ]]; then
        # sort lists and subtract
        shelved=$(p4 changes -s shelved -u "${USER_OVERRIDE}" -c "${CLIENT_NAME}" | awk '{print $2}')
        changelists=$(comm -23 <(echo "${changelists}" | sort) <(echo "${shelved}" | sort))
    fi
    print_progress +

    if [[ -n "${changelists}" ]]; then
        number_of_changelists=$(echo "${changelists}" | wc -l)
        if [[ -z "${FORCE_VERBOSE}" && -z ${FORCE_BRIEF} &&
            "${number_of_changelists}" -gt "${VERBOSE_PRINT_SOFT_LIMIT}" ]]; then
            BRIEF_PRINT="-b"
        fi

        if [[ "${number_of_changelists}" -gt "${NUMBER_OF_CHANGELISTS_LIMIT}" ]] && [[ -n "${LIMIT_CHECK}" ]]; then
            clear_line
            tput cnorm
            echo    "There are ${RED}${number_of_changelists}${NO_COLOR} changelists which answer your critereia!" >&2
            echo    "(You can disable this check using the -l option or you can limit the displyed changelists using the -m option)." >&2
            if ! promptyn "So, Have you flipped your wig? (continue?) [Y/n]"; then    # sourced in p4-help-functions
                exit 0;
            fi
            tput civis
            print_progress
        fi
        echo -en "${CYAN} - Fetching ${number_of_changelists} changelists . . .${NO_COLOR}" >&2

        # using gnu parallel:
        # this will run p4-show-changelist for each changelist in 'changelists'.
        # it will also pass the BRIEF_PRINT single argument to each run.
        if which parallel > /dev/null 2> /dev/null; then
            RESULT="$(parallel --no-notice "${SCRIPT_PATH}/p4-show-changelist" ::: ${BRIEF_PRINT} ::: ${changelists} 2> /dev/null)"
            clear_line
            echo -e "${RESULT}"
        else
            # iterate if parallel doesn't exist
            clear_line
            echo "${RED}Maybe it's time to install gnu's parallel (this script will work a lot faster...)${NO_COLOR}" >&2
            i=1
            for changelist in ${changelists}; do
                echo -ne "\r${CYAN}[${i}/${number_of_changelists}]${NO_COLOR} " >&2
                "${SCRIPT_PATH}/p4-show-changelist" ${BRIEF_PRINT} $changelist
                i=$(( i + 1 ))
            done
        fi
        wait
        if [[ -n "${default_changelist}" ]]; then
            echo
        fi
    fi
fi

clear_line

wait
if [[ -n "${default_changelist}" ]]; then
    echo -e "${PURPLE}Default changelist${NO_COLOR}"
    echo -e "${BLUE}    Pending Files${NO_COLOR}"
    if [[ -z "${BRIEF_PRINT}" ]]; then
        echo -e "${default_changelist}"
    fi
fi
